# Auto-generated CI/CD pipeline for analizai
# Milestone 2: Enterprise Production Excellence
# Generated: 2025-06-24T14:18:58.418Z

{
  "name": "analizai CI/CD",
  "on": {
    "push": {
      "branches": [
        "main",
        "develop"
      ],
      "paths": [
        "services/analizai/**"
      ]
    },
    "pull_request": {
      "branches": [
        "main",
        "develop"
      ],
      "paths": [
        "services/analizai/**"
      ]
    },
    "workflow_dispatch": {}
  },
  "env": {
    "SERVICE_NAME": "analizai",
    "WORKING_DIRECTORY": "services/analizai",
    "REGISTRY": "ghcr.io",
    "IMAGE_NAME": "codai/analizai"
  },
  "jobs": {
    "code-quality": {
      "name": "Code Quality & Security",
      "runs-on": "ubuntu-latest",
      "defaults": {
        "run": {
          "working-directory": "${{ env.WORKING_DIRECTORY }}"
        }
      },
      "steps": [
        {
          "name": "Checkout code",
          "uses": "actions/checkout@v4"
        },
        {
          "name": "Setup Node.js",
          "uses": "actions/setup-node@v4",
          "with": {
            "node-version": "20",
            "cache": "pnpm",
            "cache-dependency-path": "pnpm-lock.yaml"
          }
        },
        {
          "name": "Install dependencies",
          "run": "pnpm install --frozen-lockfile"
        },
        {
          "name": "Lint code",
          "run": "pnpm run lint"
        },
        {
          "name": "Type check",
          "run": "pnpm run type-check"
        },
        {
          "name": "Security audit",
          "run": "pnpm audit --audit-level moderate"
        },
        {
          "name": "CodeQL Analysis",
          "uses": "github/codeql-action/analyze@v2",
          "with": {
            "languages": "javascript"
          }
        },
        {
          "name": "SAST Scan",
          "uses": "securecodewarrior/github-action-add-sarif@v1",
          "with": {
            "sarif-file": "sast-results.sarif"
          }
        }
      ]
    },
    "test": {
      "name": "Tests & Coverage",
      "runs-on": "ubuntu-latest",
      "defaults": {
        "run": {
          "working-directory": "${{ env.WORKING_DIRECTORY }}"
        }
      },
      "strategy": {
        "matrix": {
          "node-version": [
            "18",
            "20"
          ]
        }
      },
      "steps": [
        {
          "name": "Checkout code",
          "uses": "actions/checkout@v4"
        },
        {
          "name": "Setup Node.js ${{ matrix.node-version }}",
          "uses": "actions/setup-node@v4",
          "with": {
            "node-version": "${{ matrix.node-version }}",
            "cache": "pnpm"
          }
        },
        {
          "name": "Install dependencies",
          "run": "pnpm install --frozen-lockfile"
        },
        {
          "name": "Run unit tests",
          "run": "pnpm run test:unit --coverage"
        },
        {
          "name": "Run integration tests",
          "run": "pnpm run test:integration"
        },
        {
          "name": "Run E2E tests",
          "run": "pnpm run test:e2e"
        },
        {
          "name": "Upload coverage reports",
          "uses": "codecov/codecov-action@v3",
          "with": {
            "file": "./coverage/lcov.info",
            "working-directory": "${{ env.WORKING_DIRECTORY }}"
          }
        }
      ]
    },
    "build": {
      "name": "Build & Package",
      "runs-on": "ubuntu-latest",
      "needs": [
        "code-quality",
        "test"
      ],
      "outputs": {
        "image-digest": "${{ steps.build.outputs.digest }}",
        "image-tag": "${{ steps.meta.outputs.tags }}"
      },
      "steps": [
        {
          "name": "Checkout code",
          "uses": "actions/checkout@v4"
        },
        {
          "name": "Setup Docker Buildx",
          "uses": "docker/setup-buildx-action@v3"
        },
        {
          "name": "Login to Container Registry",
          "uses": "docker/login-action@v3",
          "with": {
            "registry": "${{ env.REGISTRY }}",
            "username": "${{ github.actor }}",
            "password": "${{ secrets.GITHUB_TOKEN }}"
          }
        },
        {
          "name": "Extract metadata",
          "id": "meta",
          "uses": "docker/metadata-action@v5",
          "with": {
            "images": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}",
            "tags": [
              "type=ref,event=branch",
              "type=ref,event=pr",
              "type=semver,pattern={{version}}",
              "type=sha"
            ]
          }
        },
        {
          "name": "Build and push Docker image",
          "id": "build",
          "uses": "docker/build-push-action@v5",
          "with": {
            "context": "${{ env.WORKING_DIRECTORY }}",
            "push": true,
            "tags": "${{ steps.meta.outputs.tags }}",
            "labels": "${{ steps.meta.outputs.labels }}",
            "cache": {
              "from": "type=gha",
              "to": "type=gha,mode=max"
            },
            "provenance": false
          }
        },
        {
          "name": "Generate SBOM",
          "uses": "anchore/sbom-action@v0",
          "with": {
            "image": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}",
            "format": "spdx-json"
          }
        },
        {
          "name": "Container Security Scan",
          "uses": "aquasecurity/trivy-action@master",
          "with": {
            "image-ref": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}",
            "format": "sarif",
            "output": "trivy-results.sarif"
          }
        }
      ]
    },
    "deploy": {
      "name": "Deploy to Kubernetes",
      "runs-on": "ubuntu-latest",
      "needs": [
        "build"
      ],
      "if": "github.ref == 'refs/heads/main'",
      "environment": {
        "name": "production",
        "url": "https://analizai.codai.dev"
      },
      "steps": [
        {
          "name": "Checkout code",
          "uses": "actions/checkout@v4"
        },
        {
          "name": "Setup kubectl",
          "uses": "azure/setup-kubectl@v3",
          "with": {
            "version": "v1.28.0"
          }
        },
        {
          "name": "Setup Helm",
          "uses": "azure/setup-helm@v3",
          "with": {
            "version": "v3.12.0"
          }
        },
        {
          "name": "Configure kubectl",
          "run": "mkdir -p $HOME/.kube\necho \"${{ secrets.KUBE_CONFIG }}\" | base64 -d > $HOME/.kube/config\nkubectl config current-context"
        },
        {
          "name": "Deploy to Kubernetes",
          "run": "kubectl set image deployment/analizai analizai=${{ needs.build.outputs.image-tag }} -n codai-production\nkubectl rollout status deployment/analizai -n codai-production --timeout=300s"
        },
        {
          "name": "Verify deployment",
          "run": "kubectl get pods -n codai-production -l app=analizai\nkubectl get service -n codai-production analizai"
        },
        {
          "name": "Health check",
          "run": "curl -f https://analizai.codai.dev/health || exit 1"
        }
      ]
    }
  }
}