# Use the official Node.js 18 image
FROM node:18-alpine AS base

# Set common environment variables
ENV NEXT_TELEMETRY_DISABLED=1 \
    NODE_ENV=production

# Install dependencies only when needed
FROM base AS deps

# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat curl
WORKDIR /app

# Set environment for deps (include devDependencies for build tools)
ENV NODE_ENV=development

# Install pnpm
RUN corepack enable pnpm

# Copy workspace configuration
COPY pnpm-lock.yaml ./
COPY package.json ./

# Create a simplified workspace config for Docker (excluding extensions)
RUN printf 'packages:\n  - "packages/*"\n  - "apps/*"\n' > pnpm-workspace.yaml

# Copy package.json files for workspace packages
COPY packages/*/package.json ./packages/*/
COPY apps/aide-control/package.json ./apps/aide-control/

# Copy all package source files (needed for workspace builds)
COPY packages/ ./packages/

# Install dependencies with lockfile (allow updates for workspace consistency)
# Skip husky install in Docker container (git hooks not needed)
RUN npm_config_script_shell=false pnpm install --no-frozen-lockfile --ignore-scripts

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app

# Set build-time environment (keep as development during build for devDependencies)
ENV NODE_ENV=development

# Install pnpm
RUN corepack enable pnpm

# Copy dependency information and installation
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/packages ./packages

# Copy the workspace files
COPY pnpm-lock.yaml ./
COPY package.json ./
COPY tsconfig.base.json ./

# Recreate the workspace config for build
RUN printf 'packages:\n  - "packages/*"\n  - "apps/*"\n' > pnpm-workspace.yaml

# Copy aide-control app source
COPY apps/aide-control ./apps/aide-control

# Ensure workspace dependencies are properly linked and install any missing deps (including devDependencies)
RUN npm_config_script_shell=false pnpm install --no-frozen-lockfile --ignore-scripts

# Build the Next.js application with standalone output
ENV NEXT_TELEMETRY_DISABLED=1 \
    NEXT_PUBLIC_FIREBASE_PROJECT_ID=aide-dev-placeholder
WORKDIR /app/apps/aide-control
# Set NODE_ENV to production for the build process
RUN NODE_ENV=production pnpm run build

# Add build info for traceability
RUN echo "AIDE Control Panel - Build date: $(date)" > ./build-info.txt

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

# Set production environment variables
ENV NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1 \
    PORT=8080 \
    HOSTNAME="0.0.0.0"

# Create non-root user for security
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy only necessary files from builder
COPY --from=builder /app/apps/aide-control/public ./public
COPY --from=builder /app/apps/aide-control/build-info.txt ./

# Set up Next.js directory structure
RUN mkdir .next && chown nextjs:nodejs .next

# Copy standalone build and static assets (optimized by output traces)
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/apps/aide-control/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/apps/aide-control/.next/static ./.next/static

# Create health check endpoint before switching users
RUN echo '// Simple health check endpoint\nmodule.exports = function(req, res) { res.status(200).send("OK"); };' > ./health.js

# Set proper ownership of all files for the non-root user
RUN chown -R nextjs:nodejs /app

# Switch to non-root user for security
USER nextjs

# Expose the port the app will run on
EXPOSE 8080

# Add Docker labels for better image management
LABEL org.opencontainers.image.title="AIDE Control Panel" \
      org.opencontainers.image.description="Admin control panel for AIDE self-hosted deployments" \
      org.opencontainers.image.created="$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
      org.opencontainers.image.source="https://github.com/microsoft/AIDE"

# Start the application
# server.js is created by next build from the standalone output
CMD ["node", "apps/aide-control/server.js"]
